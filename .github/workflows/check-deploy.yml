name: check-deploy

on: [push]

jobs:
  test:

    runs-on: ubuntu-latest
    env: 
        working-directory: ./app


    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint 
    - name: Analysing the code with pylint
      working-directory: ${{env.working-directory}}
      run: |
        pip install -r requirements.txt ; pylint -E app.py
        
  docker:
    
    runs-on: ubuntu-latest
    needs: test
    env: 
        working-directory: app

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app:latest

        
  Terraform-Plan:
   
    runs-on: ubuntu-latest
    needs: docker
    env: 
        working-directory: ./terraform

      
    
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
    - name: Terraform fmt
      id: fmt
      working-directory: ${{env.working-directory}}
      run: terraform fmt -recursive

    - name: Terraform Init
      id: init
      working-directory: ${{env.working-directory}}
      run: terraform init -no-color

    - name: Terraform Validate
      id: validate
      working-directory: ${{env.working-directory}}
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      working-directory: ${{env.working-directory}}
      run: terraform plan -no-color

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      working-directory: ${{env.working-directory}}
      run: exit 1
      
    - name: Terraform Apply
      working-directory: ${{env.working-directory}}
      run: terraform apply -auto-approve
